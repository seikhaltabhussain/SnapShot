name: Build, Push Docker Images
#************* NOTE ********************************
# GitHub Repo/Apps mimiq-cc-app-api (front end app-api), mimiq-cc-device-api and mimiq-cc-instance-server are inter related and are deployed 
# at AWS ECS/FARGAT as three containers in ONE ECS TASK DEFINITION
#************ NOTE *********************************
on:  
  workflow_dispatch: 
  push: 
    branches: [ master ]
env:
  DOCKER_HUB_ORG_WORKSPACE_NAME: "benethon"
  DOCKER_HUB_REPOSITORY_NAME: "snapshot"
  AWS_REGION: "us-east-1"                   # set this to your preferred AWS region, e.g. us-west-1
  ECS_TASK_DEFINITION_FILE: "task-def.json" # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json                          
  CONTAINER_NAME: "snapshot-app-container"           # set this to the name of the container in the containerDefinitions section of your task definition
jobs:
  BUILD-JOB:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
    
      - name: Available platforms setup/downloaded by QEMU
        run: echo ${{ steps.qemu.outputs.platforms }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.5.0
        with:
          # List of Docker images to use as base name for tags
          images: ${{env.DOCKER_HUB_ORG_WORKSPACE_NAME}}/${{env.DOCKER_HUB_REPOSITORY_NAME}}
      
      - name: Extract branch name to make use of this with tag
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      
      - run: echo ${{ steps.extract_branch.outputs.branch }}      

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_CICD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push (server image-http server node)
        id: docker_build
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         ECR_REPOSITORY: snapshot
         IMAGE_TAG: latest
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: |
                #${{env.DOCKER_HUB_ORG_WORKSPACE_NAME}}/${{env.DOCKER_HUB_REPOSITORY_NAME}}:${{ github.sha }}
                #${{env.DOCKER_HUB_ORG_WORKSPACE_NAME}}/${{env.DOCKER_HUB_REPOSITORY_NAME}}:latest
                docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          #labels: ${{ steps.meta.outputs.labels }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}



      - name: Push image to Amazon ECR
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         ECR_REPOSITORY: snapshot
         IMAGE_TAG: latest
         run: |
          docker images
          #docker tag $ECR_REPOSITORY:latest 495021066135.dkr.ecr.eu-eat-1.amazonaws.com/${{env.DOCKER_HUB_REPOSITORY_NAME}}:latest
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
   #     #docker push 495021066135.dkr.ecr.eu-west-1.amazonaws.com/mimiq-id-api:latest






  STG-DEPLOYMENT:
    #if: github.event.ref == 'refs/heads/main'
    needs: [BUILD-JOB]
    runs-on: ubuntu-latest
    environment: stg
    env:
      ECS_SERVICE: "stg-mimiq-cc-device-service"                 # set this to your Amazon ECS service name
      ECS_CLUSTER: "stg-mimiq-consumer-cloud-cluster"                 # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION_NAME: "stg-mimiq-cc-device-task"
      
    steps:
      - name: Extract branch name to make use of this with tag
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      
      - run: echo ${{ steps.extract_branch.outputs.branch }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_CICD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD }}
          aws-region: us-east-1
    
      - name: Download task definition
        run: |
          #aws ecs describe-task-definition --task-definition task --query taskDefinition > task-definition.json
          aws ecs describe-task-definition --region ${{ secrets.MIMIQ_AWS_REGION_IRELAND }}  --task-definition ${{env.ECS_TASK_DEFINITION_NAME}}  --query taskDefinition > ${{env.ECS_TASK_DEFINITION_FILE}}
      
      - name: List current DIR and see whether "task-def.json" created or not
        run: ls
        
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./${{ env.ECS_TASK_DEFINITION_FILE }}
          container-name: ${{ env.CONTAINER_NAME }}
          #image: ${{ steps.build-image.outputs.image }}
          image: ${{env.DOCKER_HUB_ORG_WORKSPACE_NAME}}/${{env.DOCKER_HUB_REPOSITORY_NAME}}:${{ github.sha }}
          #environment-variables: |
         #   LOG_LEVEL=info
          #  ENVIRONMENT=prod

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          #wait-for-service-stability: true         
